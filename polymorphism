class ProgrammingLanguage:
  def __init__(self, name):
    self.name = name

class JavaScript(ProgrammingLanguage):
  def comment(self):
    return(f'// A Comment in {self.name}')

class Python(ProgrammingLanguage):
  def comment(self):
    return(f'# A comment in {self.name}')

language1 = JavaScript('JavaScript')
language2 = Python('Python')

def add_comment(languageObject):
  print(languageObject.comment())

add_comment(language1) # // A Comment in JavaScript
add_comment(language2) # # A comment in Python

for language in [language1, language2]:
  print(language.comment())
# // A Comment in JavaScript
# # A comment in Python

In the above block of code, I created a generic function add_comment that accepts a programming language object and calls the comment() method on it. The same comment method, when called with different objects produced different result based on their implementation of the comment method.

In the second scenario, when looping through a list of language objects, it produced different result when calling the same method on them.

This is polymorphism.

Although there are no specific guidelines or rules for when to use what OOP principle, it depends on the problem statement and the solution can be achieved in multiply ways applying the concepts of OOP.

That's it for today. My mental model is perhaps gradually evolving, trying to build the latticework of programming concepts.

Tomorrow I have planned to finish off with the remaining OOP concepts and do some fun coding exercises before jumping into another exciting programming paradigm.

Have a nice one!
